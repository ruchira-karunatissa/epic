const express = require('express');
const axios = require('axios');
const cors = require('cors');

const app = express();

// Middleware
app.use(express.json());
app.use(cors());

// Constants
const PORT = 3008;
const EPIC_BASE_URL = 'https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR/R4';
const TOKEN_URL = 'http://localhost:3001/api/token';

// Function to get access token
async function getAccessToken() {
    try {
        const response = await axios.post(TOKEN_URL);
        return response.data.access_token;
    } catch (error) {
        console.error('Token Error Details:', error.response?.data || error.message);
        throw new Error('Failed to obtain access token: ' + (error.response?.data || error.message));
    }
}

// Create clinic note endpoint
app.post('/api/clinical-notes', async (req, res) => {
    try {
        const {
            patientId,
            encounterId,
            noteText,
            noteType = "Consultation Note",  // default note type
            noteStatus = "final"             // default status
        } = req.body;

        // Validate required fields
        if (!patientId || !encounterId || !noteText) {
            return res.status(400).json({
                success: false,
                error: 'Missing required fields',
                details: 'patientId, encounterId, and noteText are required'
            });
        }

        // Convert note text to base64
        const noteBase64 = Buffer.from(noteText).toString('base64');

        // Get access token
        const accessToken = await getAccessToken();

        // Prepare document reference payload
        const documentReference = {
            resourceType: "DocumentReference",
            docStatus: noteStatus,
            type: {
                coding: [
                    {
                        system: "http://loinc.org",
                        code: "11488-4",
                        display: noteType
                    }
                ],
                text: noteType
            },
            subject: {
                reference: `Patient/${patientId}`
            },
            content: [
                {
                    attachment: {
                        contentType: "text/plain",
                        data: noteBase64
                    }
                }
            ],
            context: {
                encounter: [{
                    reference: `Encounter/${encounterId}`
                }]
            }
        };

        // Call Epic API to create document reference
        const response = await axios({
            method: 'POST',
            url: `${EPIC_BASE_URL}/DocumentReference`,
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            },
            data: documentReference
        });

        // Return success response with created document details
        res.json({
            success: true,
            message: 'Clinical note created successfully',
            documentReference: {
                id: response.data.id,
                status: response.data.docStatus,
                created: response.data.created,
                type: noteType,
                patientId,
                encounterId
            }
        });

    } catch (error) {
        console.error('Error creating clinical note:', error);
        res.status(error.response?.status || 500).json({
            success: false,
            error: 'Failed to create clinical note',
            details: error.response?.data || error.message
        });
    }
});

// Get clinical note by ID
app.get('/api/clinical-notes/:documentId', async (req, res) => {
    try {
        const { documentId } = req.params;
        const accessToken = await getAccessToken();

        const response = await axios({
            method: 'GET',
            url: `${EPIC_BASE_URL}/DocumentReference/${documentId}`,
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Accept': 'application/json'
            }
        });

        // Decode the base64 note text
        const noteData = response.data.content[0]?.attachment?.data;
        const decodedNote = noteData ? Buffer.from(noteData, 'base64').toString() : null;

        res.json({
            success: true,
            document: {
                id: response.data.id,
                status: response.data.docStatus,
                type: response.data.type?.text,
                patientId: response.data.subject?.reference.split('/')[1],
                encounterId: response.data.context?.encounter[0]?.reference.split('/')[1],
                note: decodedNote
            }
        });

    } catch (error) {
        console.error('Error fetching clinical note:', error);
        res.status(error.response?.status || 500).json({
            success: false,
            error: 'Failed to fetch clinical note',
            details: error.response?.data || error.message
        });
    }
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'healthy', timestamp: new Date().toISOString() });
});

// Start the server
const server = app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
    console.log(`Health check available at http://localhost:${PORT}/health`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('SIGTERM signal received: closing HTTP server');
    server.close(() => {
        console.log('HTTP server closed');
        process.exit(0);
    });
});