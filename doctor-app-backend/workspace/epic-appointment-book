const express = require('express');
const cors = require('cors');
const axios = require('axios');
const bodyParser = require('body-parser');
const app = express();
const PORT = process.env.PORT || 3004;

// CORS configuration
app.use(cors({
    origin: true,
    methods: ['GET', 'POST', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true,
    preflightContinue: false,
    optionsSuccessStatus: 204
}));

// Body parsing middleware for different content types
app.use(bodyParser.json({
    type: ['application/json', 'application/fhir+json']
}));

// Debug middleware
app.use((req, res, next) => {
    if (req.method === 'POST') {
        console.log('=== Request Debug Info ===');
        console.log('Headers:', req.headers);
        console.log('Body:', req.body);
        console.log('========================');
    }
    next();
});

// Appointment booking endpoint
app.post('/api/book-appointment', async (req, res) => {
    try {
        console.log('Incoming request to book appointment');
        
        // Check for empty body
        if (!req.body || Object.keys(req.body).length === 0) {
            console.log('Request body is empty. Headers:', req.headers);
            return res.status(400).json({
                success: false,
                error: 'Invalid request',
                message: 'Request body is required',
                timestamp: new Date().toISOString()
            });
        }

        // Get access token
        const tokenResponse = await axios.post('http://localhost:3001/api/token');
        const accessToken = tokenResponse.data.access_token;

        if (!accessToken) {
            throw new Error('Failed to obtain access token');
        }

        console.log('Sending request to Epic with body:', JSON.stringify(req.body, null, 2));

        // Make request to Epic's appointment booking API
        const epicResponse = await axios.post(
            'https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR/STU3/Appointment/$book',
            req.body,
            {
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                    'Content-Type': 'application/fhir+json',
                    'Accept': 'application/fhir+json'
                }
            }
        );

        let appointmentId = epicResponse.data?.parameter?.find(p => p.name === 'appointment')?.valueIdentifier?.value;

        res.status(200).json({
            success: true,
            appointmentId: appointmentId,
            message: 'Appointment successfully booked',
            details: epicResponse.data,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('Error details:', {
            message: error.message,
            stack: error.stack,
            response: error.response?.data
        });

        if (error.response) {
            res.status(error.response.status || 500).json({
                success: false,
                error: 'Failed to book appointment',
                details: error.response.data,
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(500).json({
                success: false,
                error: 'Internal server error',
                message: error.message,
                timestamp: new Date().toISOString()
            });
        }
    }
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'healthy' });
});

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});