const express = require('express');
const axios = require('axios');
const cors = require('cors');  // Add this line
const app = express();

// CORS configuration
app.use(cors({
    origin: true, // Allow all origins
    methods: ['GET', 'POST', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true,
    preflightContinue: false,
    optionsSuccessStatus: 204
}));
// Middleware for parsing JSON bodies
app.use(express.json());

// Default port
const PORT = process.env.PORT || 3003;

// Epic FHIR API endpoint
const EPIC_API_URL = 'https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR/STU3/Appointment/$find';

// Define bookable appointment statuses
const BOOKABLE_STATUSES = ['proposed', 'pending'];

// Function to get access token
async function getAccessToken() {
    try {
        const response = await axios.post('http://localhost:3001/api/token');
        return response.data.access_token;
    } catch (error) {
        console.error('Token Error Details:', error.response?.data || error.message);
        throw new Error('Failed to obtain access token: ' + (error.response?.data || error.message));
    }
}

// Function to filter appointments by date range
function filterAppointmentsByDateRange(appointments, startDate, endDate) {
    if (!startDate && !endDate) return appointments;

    const startTimestamp = startDate ? new Date(startDate).getTime() : 0;
    const endTimestamp = endDate ? new Date(endDate).getTime() : Number.MAX_SAFE_INTEGER;

    return appointments.filter(appointment => {
        const appointmentDate = new Date(appointment.dateTime).getTime();
        return appointmentDate >= startTimestamp && appointmentDate <= endTimestamp;
    });
}

// Function to filter appointments by other criteria
function filterAppointments(appointments, filters) {
    return appointments.filter(appointment => {
        // Check practitioner match if filter provided
        if (filters.practitioner && 
            !appointment.practitioner.toLowerCase().includes(filters.practitioner.toLowerCase())) {
            return false;
        }

        // Check location match if filter provided
        if (filters.location && 
            !appointment.location.toLowerCase().includes(filters.location.toLowerCase())) {
            return false;
        }

        // Check specialization match if filter provided
        if (filters.specialization && 
            !appointment.specialization.toLowerCase().includes(filters.specialization.toLowerCase())) {
            return false;
        }

        return true;
    });
}

// Main API endpoint to find appointments
app.post('/api/appointments', async (req, res) => {
    try {
        // Get optional filter parameters from request body
        const { practitioner, location, specialization, startDate, endDate } = req.body;

        // Get access token
        const accessToken = await getAccessToken();

        // Make request to Epic API
        const epicResponse = await axios({
            method: 'POST',
            url: EPIC_API_URL,
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            },
            data: {
                resourceType: "Parameters",
                parameter: []
            }
        });

        // Transform the response to desired format with correct parsing
        let formattedAppointments = epicResponse.data.entry.map(entry => {
            const appointment = entry.resource;
            
            // Find practitioner and location from participants
            const practitionerParticipant = appointment.participant.find(p => 
                p.actor.reference.includes('/Practitioner/'));
            const locationParticipant = appointment.participant.find(p => 
                p.actor.reference.includes('/Location/'));
            
            // Find patient participant if available
            const patientParticipant = appointment.participant?.find(p => 
                p.actor.reference.includes('/Patient/'));
            
            // Extract patient ID from reference if available
            const patientId = patientParticipant?.actor.reference.split('/').pop() || 'Unknown';
            
            // Get service type if available
            const serviceType = appointment.serviceType?.[0]?.coding?.[0]?.display || 'Unknown';

            return {
                appointmentId: appointment.id || 'Unknown',
                status: appointment.status || 'Unknown',
                patientId: patientId,
                practitioner: practitionerParticipant?.actor?.display || 'Unknown',
                location: locationParticipant?.actor?.display || 'Unknown',
                specialization: serviceType,
                dateTime: appointment.start,
                duration: appointment.minutesDuration || 'Unknown',
                isBookable: BOOKABLE_STATUSES.includes(appointment.status?.toLowerCase())
            };
        });

        // Filter for only bookable appointments
        formattedAppointments = formattedAppointments.filter(appointment => appointment.isBookable);

        // Apply date filtering
        if (startDate || endDate) {
            formattedAppointments = filterAppointmentsByDateRange(formattedAppointments, startDate, endDate);
        }

        // Apply other filters
        if (practitioner || location || specialization) {
            formattedAppointments = filterAppointments(formattedAppointments, {
                practitioner,
                location,
                specialization
            });
        }

        res.json({
            success: true,
            totalCount: formattedAppointments.length,
            appointments: formattedAppointments
        });

    } catch (error) {
        console.error('Error fetching appointments:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to fetch appointments',
            details: error.message
        });
    }
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ status: 'healthy' });
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});